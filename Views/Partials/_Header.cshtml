@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Umbraco.Cms.Web.Common.PublishedModels;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Routing
@using Umbraco.Extensions

@inject IPublishedValueFallback PublishedValueFallback
@inject IPublishedUrlProvider PublishedUrlProvider

@{
    List<string> types = new List<string>();
    IEnumerable<IPublishedContent> selection = null;

    try
    {
        types.Add(Dt_PageContent.ModelTypeAlias);
        types.Add(Dt_News.ModelTypeAlias);
        types.Add(Dt_Services.ModelTypeAlias);
        types.Add(Dt_ServicesItem.ModelTypeAlias);

        var master = (Dt_HomePage)Umbraco.ContentAtRoot().FirstOrDefault();
        selection = master.Children
                              .Where(x =>
                                  x.IsVisible(PublishedValueFallback) &&
                                  types.Contains(x.ContentType.Alias))
                              .Where(x => x.Value<Boolean>("ShowInMainMenu") == true)
                              .ToArray();
    }
    catch (Exception ex)
    {
        SharedHelper.LogException(ex);
    }
}

<section class="menuWithBanner">

    <a href="#!" class="toggleOptions"><img src="/css/assets/images/shared/navBarDots.svg" alt=""></a>

    <div class="navDGA">
        <div class="container">
            <div class="row row-new">

                <div class="col-2-new">
                    <div class="logoMain">
                        <a href="@Model?.Root()?.Url()">
                            <img src="/css/assets/images/shared/palm-swords-4.png" alt="">
                            <span>
                                @SharedHelper.GetDictionaryValue("WebsiteName", Umbraco)
                            </span>
                        </a>
                    </div>
                </div>

                <div class="col-7-new">
                    <nav class="navbar navbarMenu  navbar-expand-lg navbar-light">
                        <div class="">
                            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                                    aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                                <span class="navbar-toggler-icon"></span>
                            </button>
                            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                                <ul class="navbar-nav me-auto mb-2 mb-lg-0">

                                    @if (selection != null)
                                    {
                                        foreach (var item in selection)
                                        {
                                            var redirectURL = item.Value("redirectURL").ToLinkURL("");
                                            IPublishedContent[]? children = null;

                                            children = item.Children?
                                            .Where(x => x.IsVisible(PublishedValueFallback) && types.Contains(x.ContentType.Alias))
                                            .Where(x => x.Value<Boolean>("ShowInMainMenu") == true)
                                            .ToArray();

                                            var linkURL = string.IsNullOrEmpty(redirectURL) ? item.Url(PublishedUrlProvider) : redirectURL;
                                            @* if (children?.Length > 0)
                                            {
                                                link = "#";
                                            } *@

                                            <li class="nav-item @(children?.Length > 0 ? "dropdown" : "")">

                                                @if (children?.Length > 0)
                                                {
                                                    <a href="@linkURL" id="navbarDropdown@(item.Id)" class="nav-link @(item.IsAncestorOrSelf(Model) ? "active" : null) dropdown-toggle" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                        @item.ToPageTitle()
                                                    </a>

                                                }
                                                else
                                                {
                                                    <a href="@linkURL" id="navbarDropdown@(item.Id)" class="nav-link @(item.IsAncestorOrSelf(Model) ? "active" : null)">
                                                        @item.ToPageTitle()
                                                    </a>
                                                }

                                                @{
                                                    if (children?.Length > 0)
                                                    {
                                                        ChildPages(children, item.Id);
                                                    }
                                                }

                                            </li>
                                        }
                                    }

                                </ul>
                            </div>
                        </div>
                    </nav>
                </div>

                <div class="col-3-new">
                    <ul class="navActions">
                        <li>
                            <a href="/contact-us/">
                                <img src="/css/assets/images/shared/question.svg" alt="">
                                <span>
                                    اتصل بنا
                                </span>
                            </a>
                        </li>
                        <li class="searchCustom">
                            <button type="button" class="btnSr" data-bs-toggle="modal" data-bs-target="#searchModal">
                                <img src="/css/assets/images/shared/search-icon-black.svg" alt="">
                                <span>
                                    بحث
                                </span>
                            </button>
                        </li>
                    </ul>
                </div>

            </div>
        </div>
    </div>

</section>

<div class="modal modalSearch fade" id="searchModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="SearchCustom">
                    <div class="forGroup">
                        <input type="text"
                               id="txtsitesearch"
                               class="searchInput"
                               value=""
                               placeholder="أدخل كلمة البحث..." />
                        <button type="submit" id="btnsitesearch" class="searchSubmit">
                            <img src="/css/assets/images/shared/leading-iconSearcch.svg" alt="" />
                        </button>
                    </div>
                    <div class="boxSloce">
                        <button button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <img src="/css/assets/images/shared/closeSearch.svg" alt="" />
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@{
    void ChildPages(IPublishedContent[] selection, int ID)
    {
        //Ensure that we have a collection of pages
        if (selection.Length > 0)
        {
            // Get the first page in pages and get the level
            var naviLevel = selection[0].Level;

            // Add in level for a CSS hook
            <div class="dropdown-menu" aria-labelledby="navbarDropdown@(ID)">
                <div class="container cont1280">
                    <div class="row">
                        @foreach (var item in selection)
                        {
                            var redirectURL = item.Value("redirectURL").ToLinkURL("");
                            var linkURL = string.IsNullOrEmpty(redirectURL) ? item.Url(PublishedUrlProvider) : redirectURL;
                            @* if (children?.Length > 0)
                            {
                                link = "#";
                            } *@

                            <div class="col-lg-3">
                                <a class="dropdown-item" href="@linkURL">
                                    <h4 class="title">
                                        @item.ToPageTitle()
                                    </h4>
                                </a>
                                @* if the page has any children, where the property umbracoNaviHide is not True *@
                                @{
                                    var children = item?.Children?.Where(x => x.IsVisible(PublishedValueFallback) && types.Contains(x.ContentType.Alias))
                                    .Where(x => x.Value<Boolean>("ShowInMainMenu") == true)
                                    .ToArray();
                                    if (children?.Length > 0)
                                    {
                                        @* Recurse and call the ChildPages method to display the children *@
                                        ChildPages2(children, item.Id);
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    }
    void ChildPages2(IPublishedContent[] selection, int ID)
    {
        //Ensure that we have a collection of pages
        if (selection.Length > 0)
        {
            // Get the first page in pages and get the level
            var naviLevel = selection[0].Level;

            <ul>
                @foreach (var item in selection)
                {
                    var redirectURL = item.Value("redirectURL").ToLinkURL("");
                    var linkURL = string.IsNullOrEmpty(redirectURL) ? item.Url(PublishedUrlProvider) : redirectURL;
                    @* if (children?.Length > 0)
                            {
                                link = "#";
                            } *@

                    <li>
                        <a class="dropdown-item" href="@linkURL">
                            @item.ToPageTitle()
                        </a>
                    </li>
                }
            </ul>
        }
    }
}
